apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
compileJava {
  sourceCompatibility = '1.8'
}

//assign defaults and overwrite them with existing parameters
ext{
    projectPath    =   projectDir.getAbsolutePath()
    objyVersion    =   project.hasProperty("objyVersion")      ?   project.getProperty('objyVersion')      : "12.5.1"
    thingspanhome  =   project.hasProperty("thingspanhome")    ?   project.getProperty('thingspanhome')    :   '/opt' + File.separator + 'Objectivity' + File.separator + '12.5'
    fdname         =   project.hasProperty('fdname')           ?   project.getProperty('fdname')           :   'bitcoin'
    fddirhost      =   project.hasProperty('fddirhost')        ?   project.getProperty('fddirhost')        :   java.net.InetAddress.getLocalHost().getHostName();
    fddirpath      =   project.hasProperty('fddirpath')        ?   project.getProperty('fddirpath')        :   projectPath  + File.separator + 'data' + File.separator
    objydbcorepath =   "${thingspanhome}${File.separator}lib${File.separator}"
    UserHomeDir    =   System.getProperty("user.home")
}	
//=======Overwriting default arguments provided by the respective tasks===========
//mainClassName = 'com.objy.se.query.QueryServer'
mainClassName = 'com.objy.se.ingest.BitcoinIngester'

applicationDefaultJvmArgs = ["-Djava.library.path=${objydbcorepath}:"]
//run.args = [fddirhost + '::' + fddirpath + fdname + '.boot']
//jar.archiveName = "verisk_query.jar"

//================================================================================
//Checking if thingspan installation directory exists
if(file(thingspanhome).exists())
    System.out.println("Thingspan Installation: " + thingspanhome)
else
    throw new FileNotFoundException("Could not locate Thingspan Installation directory: " + thingspanhome + ". Please specifiy the appropiate installation directory using the thingspanhome paramter")

/**
  * Repositories to look for the respective dependencies
  */
repositories {
	mavenCentral()
}

configurations{
	packaging
}
/**
  * All dependencies needed to build the project.
  */
dependencies {
    packaging files(objydbcorepath + "objydb-core-${objyVersion}.jar")
    packaging files(objydbcorepath + "objydb-rest-${objyVersion}.jar")
    compile files(objydbcorepath + "objydb-core-${objyVersion}.jar")
    compile files(objydbcorepath + "objydb-rest-${objyVersion}.jar")
	compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'
	compile group: 'org.glassfish.grizzly', name: 'grizzly-http-all', version: '2.3.27'
    compile group: 'com.beust', name: 'jcommander', version: '1.7'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    compile 'org.bitcoinj:bitcoinj-core:0.14.3'
}


/**
  * Creates a Fat Jar using all the dependencies and from the included sourceSets
  */
task fatJar(type: Jar, dependsOn: 'build'){
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    from files(sourceSets.main.output.classesDir, sourceSets.main.output.resourcesDir)
    zip64 true
    baseName 'bity'
}

task queryJar(type: Jar){
	from(sourceSets.main.output){
		include "com/objy/**"
	}
	baseName 'bity_query'
}

jar.dependsOn 'queryJar'

task runServer(type: JavaExec, dependsOn: ['build', 'fatJar']){
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	main = 'com.objy.se.query.QueryServer'
	args '-bootfile',"${fddirhost}::${fddirpath}${fdname}.boot"
}

task runIngester(type: JavaExec, dependsOn: ['build', 'fatJar']){
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	main = 'com.objy.se.ingest.BitcoinIngester'
	args "${UserHomeDir}/.bitcoin/blocks", \
        "${fddirhost}::${fddirpath}${fdname}.boot"
}

task setupObjy(type: JavaExec, dependsOn: ['build', 'fatJar']){
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	main = 'com.objy.se.ingest.SetupObjy'
	args "${fddirhost}::${fddirpath}${fdname}.boot"
}

task debug(dependsOn: ['build', 'fatJar'], type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.objy.se.ingest.BitcoinIngester'
	args "${UserHomeDir}/.bitcoin/blocks", \
        "${fddirhost}::${fddirpath}${fdname}.boot"
    standardInput = System.in
    ignoreExitValue = true
    debug = true
}


